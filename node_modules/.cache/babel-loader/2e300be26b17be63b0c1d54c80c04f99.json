{"ast":null,"code":"import _defineProperty from \"/Users/byeonggyu/Desktop/etc/200.dev/10.project/misemise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/byeonggyu/Desktop/etc/200.dev/10.project/misemise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _this = this;\n\nimport { handleActions, createAction } from 'redux-actions';\nimport axios from 'axios';\n\nvar getMiseDate = function getMiseDate(otp) {\n  console.log('getMiose', otp); // parentCd : 사용자가 클릭한 geoJSON의 코드값.\n  // zoomLevel : 요청 레벨.\n\n  return axios.request({\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    method: 'GET',\n    url: \"http://localhost:8080?zoomLevel=\".concat(otp.zoomLevel, \"&parentCd=\").concat(otp.parentCd)\n  });\n}; // 한글 주소로 변환한다.\n\n\nvar converLatLngToAddr = function converLatLngToAddr(otp) {\n  var naver = otp.naver,\n      _lat = otp._lat,\n      _lng = otp._lng;\n  return new Promise(function (resolve) {\n    naver.maps.Service.reverseGeocode({\n      location: new naver.maps.LatLng(_lat, _lng)\n    }, function (status, response) {\n      if (status === naver.maps.Service.Status.OK) {\n        var addr = response.result.items[0];\n        resolve(addr);\n      }\n    });\n  });\n}; // Action\n\n\nvar GET_MISE_DATA = 'GET_MISE_DATA'; // React에서 호출하는 부분\n\nexport var getData = createAction(GET_MISE_DATA);\nexport var getDataAsync = function getDataAsync(otp) {\n  return function (dispatch) {\n    // 주소변환.\n    converLatLngToAddr(otp).then(function (rtn) {\n      return getMiseDate(_objectSpread({}, otp, {\n        addr: rtn\n      }));\n    }).then(function (rtn) {\n      // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\n      dispatch({\n        type: GET_MISE_DATA,\n        payload: _objectSpread({}, rtn, otp)\n      });\n    }).catch(function (error) {\n      // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\n      dispatch({\n        type: GET_MISE_DATA,\n        payload: _objectSpread({}, error, otp)\n      });\n    });\n  };\n}; // 행정구역의 레벨. (줌 레벨)\n// 중앙 : 충주.\n\nvar counterInitialState = {\n  data: {},\n  mapObj: {},\n  zoomLevel: 2,\n  lat: 36.9257913,\n  lng: 127.87798\n};\n\nvar getLevel = function getLevel(_num) {\n  _num = parseInt(_num, 10);\n  var container = [{\n    min: 0,\n    max: 15,\n    level: '좋음'\n  }, {\n    min: 16,\n    max: 35,\n    level: '보통'\n  }, {\n    min: 36,\n    max: 75,\n    level: '나쁨'\n  }, {\n    min: 76,\n    max: 999,\n    level: '매우나쁨'\n  }];\n  return container.reduce(function (acc, cur) {\n    return cur.min <= _num ? cur.level : acc;\n  }, '');\n}; // 리듀서.\n\n\nexport default handleActions(_defineProperty({}, GET_MISE_DATA, function (state, action) {\n  var _action$payload = action.payload,\n      data = _action$payload.data,\n      _lat = _action$payload._lat,\n      _lng = _action$payload._lng,\n      map = _action$payload.map,\n      zoomLevel = _action$payload.zoomLevel;\n  var gridData = [];\n\n  if (data.geoData) {\n    data.geoData.forEach(function (i) {\n      gridData.push({\n        id: i.properties.LOC_KOR_NM,\n        name: i.properties.AIR_LV,\n        etc: _this.getLevel(i.properties.AIR_LV)\n      });\n    });\n  }\n\n  return _objectSpread({}, state, {\n    'zoomLevel': zoomLevel,\n    'mapObj': map,\n    'lat': _lat,\n    'lng': _lng,\n    'data': data\n  });\n}), counterInitialState);","map":{"version":3,"sources":["/Users/byeonggyu/Desktop/etc/200.dev/10.project/misemise/src/store/modules/index.js"],"names":["handleActions","createAction","axios","getMiseDate","otp","console","log","request","headers","method","url","zoomLevel","parentCd","converLatLngToAddr","naver","_lat","_lng","Promise","resolve","maps","Service","reverseGeocode","location","LatLng","status","response","Status","OK","addr","result","items","GET_MISE_DATA","getData","getDataAsync","dispatch","then","rtn","type","payload","catch","error","counterInitialState","data","mapObj","lat","lng","getLevel","_num","parseInt","container","min","max","level","reduce","acc","cur","state","action","map","gridData","geoData","forEach","i","push","id","properties","LOC_KOR_NM","name","AIR_LV","etc"],"mappings":"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","sourcesContent":["import { handleActions, createAction } from 'redux-actions'\nimport axios from 'axios'\n\nconst getMiseDate = (otp) => {\n  console.log('getMiose', otp)\n\n  // parentCd : 사용자가 클릭한 geoJSON의 코드값.\n  // zoomLevel : 요청 레벨.\n\n  return axios.request({\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8'\n    },\n    method: 'GET',\n    url: `http://localhost:8080?zoomLevel=${otp.zoomLevel}&parentCd=${otp.parentCd}`\n  })\n}\n\n// 한글 주소로 변환한다.\nconst converLatLngToAddr = (otp) => {\n  const { naver, _lat, _lng } = otp\n\n  return new Promise((resolve) => {\n    naver.maps.Service.reverseGeocode({ location: new naver.maps.LatLng(_lat, _lng) }, (status, response) => {\n      if (status === naver.maps.Service.Status.OK) {\n        let addr = response.result.items[0]\n        resolve(addr)\n      }\n    })\n  })\n}\n\n// Action\nconst GET_MISE_DATA = 'GET_MISE_DATA'\n\n// React에서 호출하는 부분\nexport const getData = createAction(GET_MISE_DATA)\n\nexport const getDataAsync = (otp) => dispatch => {\n  // 주소변환.\n  converLatLngToAddr(otp).then(rtn => {\n    return getMiseDate({ ...otp, addr: rtn })\n  }).then(rtn => {\n    // 요청이 성공했을경우, 서버 응답내용을 payload 로 설정하여 GET_POST_SUCCESS 액션을 디스패치합니다.\n\n    dispatch({\n      type: GET_MISE_DATA,\n      payload: { ...rtn, ...otp }\n    })\n  }).catch(error => {\n    // 에러가 발생했을 경우, 에로 내용을 payload 로 설정하여 GET_POST_FAILURE 액션을 디스패치합니다.\n    dispatch({\n      type: GET_MISE_DATA,\n      payload: { ...error, ...otp }\n    })\n  })\n}\n\n// 행정구역의 레벨. (줌 레벨)\n// 중앙 : 충주.\nconst counterInitialState = {\n  data: {},\n  mapObj: {},\n  zoomLevel: 2,\n  lat: 36.9257913,\n  lng: 127.87798\n}\n\nconst getLevel = function (_num) {\n  _num = parseInt(_num, 10)\n\n  const container = [\n    { min: 0, max: 15, level: '좋음' },\n    { min: 16, max: 35, level: '보통' },\n    { min: 36, max: 75, level: '나쁨' },\n    { min: 76, max: 999, level: '매우나쁨' }\n  ]\n\n  return container.reduce((acc, cur) => cur.min <= _num ? cur.level : acc, '')\n}\n\n// 리듀서.\nexport default handleActions({\n  [GET_MISE_DATA]: (state, action) => {\n    const { data, _lat, _lng, map, zoomLevel } = action.payload\n\n    let gridData = []\n     if (data.geoData) {\n      data.geoData.forEach(i => {\n        gridData.push({ id: i.properties.LOC_KOR_NM, name: i.properties.AIR_LV, etc: this.getLevel(i.properties.AIR_LV) })\n      })\n    }\n\n    return {\n      ...state,\n      'zoomLevel': zoomLevel,\n      'mapObj': map,\n      'lat': _lat,\n      'lng': _lng,\n      'data': data\n    }\n  }\n}, counterInitialState)\n"]},"metadata":{},"sourceType":"module"}