{"ast":null,"code":"/*!\n * tui-pagination.js\n * @version 3.3.2\n * @author NHN FE Development Team <dl_javascript@nhn.com>\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"tui-code-snippet\"));else if (typeof define === 'function' && define.amd) define([\"tui-code-snippet\"], factory);else if (typeof exports === 'object') exports[\"Pagination\"] = factory(require(\"tui-code-snippet\"));else root[\"tui\"] = root[\"tui\"] || {}, root[\"tui\"][\"Pagination\"] = factory(root[\"tui\"] && root[\"tui\"][\"util\"]);\n})(this, function (__WEBPACK_EXTERNAL_MODULE_7__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"dist\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * @fileoverview The entry file of Pagination components\n       * @author NHN. FE Development Lab <dl_javascript@nhn.com>\n       */\n      'use strict';\n\n      __webpack_require__(1);\n\n      module.exports = __webpack_require__(6);\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports) {// removed by extract-text-webpack-plugin\n\n      /***/\n    },,,,,\n    /* 2 */\n\n    /* 3 */\n\n    /* 4 */\n\n    /* 5 */\n\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var snippet = __webpack_require__(7);\n\n      var View = __webpack_require__(8);\n\n      var util = __webpack_require__(9);\n\n      var defaultOption = {\n        totalItems: 10,\n        itemsPerPage: 10,\n        visiblePages: 10,\n        page: 1,\n        centerAlign: false,\n        firstItemClassName: 'tui-first-child',\n        lastItemClassName: 'tui-last-child',\n        usageStatistics: true\n      };\n      /**\n       * Pagination class\n       * @class Pagination\n       * @param {string|HTMLElement|jQueryObject} container - Container element or id selector\n       * @param {object} options - Option object\n       *     @param {number} [options.totalItems=10] Total item count\n       *     @param {number} [options.itemsPerPage=10] Item count per page\n       *     @param {number} [options.visiblePages=10] Display page link count\n       *     @param {number} [options.page=1] Display page after pagination draw.\n       *     @param {boolean}[options.centerAlign=false] Whether current page keep center or not\n       *     @param {string} [options.firstItemClassName='first-child'] The class name of the first item\n       *     @param {string} [options.lastItemClassName='last-child'] The class name of the last item\n       *     @param {object} [options.template] A markup string set to make element\n       *         @param {string|function} [options.template.page] HTML template\n       *         @param {string|function} [options.template.currentPage] HTML template\n       *         @param {string|function} [options.template.moveButton] HTML template\n       *         @param {string|function} [options.template.disabledMoveButton] HTML template\n       *         @param {string|function} [options.template.moreButton] HTML template\n       *     @param {boolean} [options.usageStatistics=true] Send the hostname to google analytics.\n       *         If you do not want to send the hostname, this option set to false.\n       * @example\n       * var Pagination = tui.Pagination; // or require('tui-pagination')\n       *\n       * var container = document.getElementById('pagination');\n       * var options = { // below default value of options\n       *      totalItems: 10,\n       *      itemsPerPage: 10,\n       *      visiblePages: 10,\n       *      page: 1,\n       *      centerAlign: false,\n       *      firstItemClassName: 'tui-first-child',\n       *      lastItemClassName: 'tui-last-child',\n       *      template: {\n       *          page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n       *          currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n       *          moveButton:\n       *              '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' +\n       *                  '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n       *              '</a>',\n       *          disabledMoveButton:\n       *              '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' +\n       *                  '<span class=\"tui-ico-{{type}}\">{{type}}</span>' +\n       *              '</span>',\n       *          moreButton:\n       *              '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' +\n       *                  '<span class=\"tui-ico-ellip\">...</span>' +\n       *              '</a>'\n       *      }\n       * };\n       * var pagination = new Pagination(container, options);\n       */\n\n      var Pagination = snippet.defineClass(\n      /** @lends Pagination.prototype */\n      {\n        init: function init(container, options) {\n          /**\n           * Option object\n           * @type {object}\n           * @private\n           */\n          this._options = snippet.extend({}, defaultOption, options);\n          /**\n           * Current page number\n           * @type {number}\n           * @private\n           */\n\n          this._currentPage = 0;\n          /**\n           * View instance\n           * @type {View}\n           * @private\n           */\n\n          this._view = new View(container, this._options, snippet.bind(this._onClickHandler, this));\n\n          this._paginate();\n\n          if (this._options.usageStatistics) {\n            util.sendHostNameToGA();\n          }\n        },\n\n        /**\n         * Set current page\n         * @param {number} page - Current page\n         * @private\n         */\n        _setCurrentPage: function _setCurrentPage(page) {\n          this._currentPage = page || this._options.page;\n        },\n\n        /**\n         * Get last page number\n         * @returns {number} Last page number\n         * @private\n         */\n        _getLastPage: function _getLastPage() {\n          var lastPage = Math.ceil(this._options.totalItems / this._options.itemsPerPage);\n          return !lastPage ? 1 : lastPage;\n        },\n\n        /**\n         * Index of list in total lists\n         * @param {number} pageNumber - Page number\n         * @returns {number} Page index or number\n         * @private\n         */\n        _getPageIndex: function _getPageIndex(pageNumber) {\n          var left, pageIndex;\n\n          if (this._options.centerAlign) {\n            left = Math.floor(this._options.visiblePages / 2);\n            pageIndex = pageNumber - left;\n            pageIndex = Math.max(pageIndex, 1);\n            pageIndex = Math.min(pageIndex, this._getLastPage() - this._options.visiblePages + 1);\n            return pageIndex;\n          }\n\n          return Math.ceil(pageNumber / this._options.visiblePages);\n        },\n\n        /**\n         * Get relative page\n         * @param {string} moveType - Move type ('prev' or 'next')\n         * @returns {number} Relative page number\n         * @private\n         */\n        _getRelativePage: function _getRelativePage(moveType) {\n          var isPrevMove = moveType === 'prev';\n          var currentPage = this.getCurrentPage();\n          return isPrevMove ? currentPage - 1 : currentPage + 1;\n        },\n\n        /**\n         * Get more page index\n         * @param {string} moveType - Move type ('prev' or 'next')\n         * @returns {number} Page index\n         * @private\n         */\n        _getMorePageIndex: function _getMorePageIndex(moveType) {\n          var currentPageIndex = this._getPageIndex(this.getCurrentPage());\n\n          var pageCount = this._options.visiblePages;\n          var isPrevMove = moveType === 'prev';\n          var pageIndex;\n\n          if (this._options.centerAlign) {\n            pageIndex = isPrevMove ? currentPageIndex - 1 : currentPageIndex + pageCount;\n          } else {\n            pageIndex = isPrevMove ? (currentPageIndex - 1) * pageCount : currentPageIndex * pageCount + 1;\n          }\n\n          return pageIndex;\n        },\n\n        /* eslint-enable complexity */\n\n        /**\n         * Get available page number from over number\n         * If total page is 23, but input number is 30 => return 23\n         * @param {number} page - Page number\n         * @returns {number} Replaced pgae number\n         * @private\n         */\n        _convertToValidPage: function _convertToValidPage(page) {\n          var lastPageNumber = this._getLastPage();\n\n          page = Math.max(page, 1);\n          page = Math.min(page, lastPageNumber);\n          return page;\n        },\n\n        /**\n         * Create require view set, notify view to update\n         * @param {number} page - Page number\n         * @private\n         */\n        _paginate: function _paginate(page) {\n          var viewData = this._makeViewData(page || this._options.page);\n\n          this._setCurrentPage(page);\n\n          this._view.update(viewData);\n        },\n\n        /**\n         * Create and get view data\n         * @param {number} page - Page number\n         * @returns {object} view data\n         * @private\n         */\n        _makeViewData: function _makeViewData(page) {\n          var viewData = {};\n\n          var lastPage = this._getLastPage();\n\n          var currentPageIndex = this._getPageIndex(page);\n\n          var lastPageListIndex = this._getPageIndex(lastPage);\n\n          var edges = this._getEdge(page);\n\n          viewData.leftPageNumber = edges.left;\n          viewData.rightPageNumber = edges.right;\n          viewData.prevMore = currentPageIndex > 1;\n          viewData.nextMore = currentPageIndex < lastPageListIndex;\n          viewData.page = page;\n          viewData.currentPageIndex = page;\n          viewData.lastPage = lastPage;\n          viewData.lastPageListIndex = lastPage;\n          return viewData;\n        },\n\n        /**\n         * Get each edge page\n         * @param {object} page - Page number\n         * @returns {{left: number, right: number}} Edge page numbers\n         * @private\n         */\n        _getEdge: function _getEdge(page) {\n          var leftPageNumber, rightPageNumber, left;\n\n          var lastPage = this._getLastPage();\n\n          var visiblePages = this._options.visiblePages;\n\n          var currentPageIndex = this._getPageIndex(page);\n\n          if (this._options.centerAlign) {\n            left = Math.floor(visiblePages / 2);\n            leftPageNumber = Math.max(page - left, 1);\n            rightPageNumber = leftPageNumber + visiblePages - 1;\n\n            if (rightPageNumber > lastPage) {\n              leftPageNumber = Math.max(lastPage - visiblePages + 1, 1);\n              rightPageNumber = lastPage;\n            }\n          } else {\n            leftPageNumber = (currentPageIndex - 1) * visiblePages + 1;\n            rightPageNumber = currentPageIndex * visiblePages;\n            rightPageNumber = Math.min(rightPageNumber, lastPage);\n          }\n\n          return {\n            left: leftPageNumber,\n            right: rightPageNumber\n          };\n        },\n\n        /**\n         * Pagelist click event hadnler\n         * @param {?string} buttonType - Button type\n         * @param {?number} page - Page number\n         * @private\n         */\n\n        /* eslint-disable complexity */\n        _onClickHandler: function _onClickHandler(buttonType, page) {\n          switch (buttonType) {\n            case 'first':\n              page = 1;\n              break;\n\n            case 'prev':\n              page = this._getRelativePage('prev');\n              break;\n\n            case 'next':\n              page = this._getRelativePage('next');\n              break;\n\n            case 'prevMore':\n              page = this._getMorePageIndex('prev');\n              break;\n\n            case 'nextMore':\n              page = this._getMorePageIndex('next');\n              break;\n\n            case 'last':\n              page = this._getLastPage();\n              break;\n\n            default:\n              if (!page) {\n                return;\n              }\n\n          }\n\n          this.movePageTo(page);\n        },\n\n        /* eslint-enable complexity */\n\n        /**\n         * Reset pagination\n         * @param {*} totalItems - Redraw page item count\n         * @example\n         * pagination.reset();\n         * pagination.reset(100);\n         */\n        reset: function reset(totalItems) {\n          if (snippet.isUndefined(totalItems)) {\n            totalItems = this._options.totalItems;\n          }\n\n          this._options.totalItems = totalItems;\n\n          this._paginate(1);\n        },\n\n        /**\n         * Move to specific page, redraw list.\n         * Before move fire beforeMove event, After move fire afterMove event.\n         * @param {Number} targetPage - Target page\n         * @example\n         * pagination.movePageTo(10);\n         */\n        movePageTo: function movePageTo(targetPage) {\n          targetPage = this._convertToValidPage(targetPage);\n          /**\n           * @event Pagination#beforeMove\n           * @type {object} evt - Custom event object\n           * @property {number} page - Moved page\n           * @example\n           * paganation.on('beforeMove', function(evt) {\n           *     var currentPage = evt.page;\n           *\n           *     if (currentPage === 10) {\n           *         return false;\n           *         // return true;\n           *     }\n           * });\n           */\n\n          if (!this.invoke('beforeMove', {\n            page: targetPage\n          })) {\n            return;\n          }\n\n          this._paginate(targetPage);\n          /**\n           * @event Pagination#afterMove\n           * @type {object} evt - Custom event object\n           * @property {number} page - Moved page\n           * @example\n           * paganation.on('afterMove', function(evt) {\n           *      var currentPage = evt.page;\n           *      console.log(currentPage);\n           * });\n           */\n\n\n          this.fire('afterMove', {\n            page: targetPage\n          });\n        },\n\n        /**\n         * Set total count of items\n         * @param {number} itemCount - Total item count\n         */\n        setTotalItems: function setTotalItems(itemCount) {\n          this._options.totalItems = itemCount;\n        },\n\n        /**\n         * Set count of items per page\n         * @param {number} itemCount - Item count\n         */\n        setItemsPerPage: function setItemsPerPage(itemCount) {\n          this._options.itemsPerPage = itemCount;\n        },\n\n        /**\n         * Get current page\n         * @returns {number} Current page\n         */\n        getCurrentPage: function getCurrentPage() {\n          return this._currentPage || this._options.page;\n        }\n      });\n      snippet.CustomEvents.mixin(Pagination);\n      module.exports = Pagination;\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var snippet = __webpack_require__(7);\n\n      var util = __webpack_require__(9);\n\n      var extend = snippet.extend;\n      var forEach = snippet.forEach;\n      var isString = snippet.isString;\n      var bind = snippet.bind;\n      var isHTMLNode = snippet.isHTMLNode;\n      var defaultTemplate = {\n        page: '<a href=\"#\" class=\"tui-page-btn\">{{page}}</a>',\n        currentPage: '<strong class=\"tui-page-btn tui-is-selected\">{{page}}</strong>',\n        moveButton: '<a href=\"#\" class=\"tui-page-btn tui-{{type}}\">' + '<span class=\"tui-ico-{{type}}\">{{type}}</span>' + '</a>',\n        disabledMoveButton: '<span class=\"tui-page-btn tui-is-disabled tui-{{type}}\">' + '<span class=\"tui-ico-{{type}}\">{{type}}</span>' + '</span>',\n        moreButton: '<a href=\"#\" class=\"tui-page-btn tui-{{type}}-is-ellip\">' + '<span class=\"tui-ico-ellip\">...</span>' + '</a>'\n      };\n      var moveButtons = ['first', 'prev', 'next', 'last'];\n      var moreButtons = ['prev', 'next'];\n      var INVALID_CONTAINER_ELEMENT = 'The container element is invalid.';\n      /**\n       * Pagination view class\n       * @class View\n       * @param {string|HTMLElement|jQueryObject} container - Container element or id selector\n       * @param {object} options - Option object\n       *     @param {number} [options.totalItems=10] Total item count\n       *     @param {number} [options.itemsPerPage=10] Item count per page\n       *     @param {number} [options.visiblePages=10] Display page link count\n       *     @param {number} [options.page=1] Display page after pagination draw.\n       *     @param {boolean}[options.centerAlign=false] Whether current page keep center or not\n       *     @param {string} [options.firstItemClassName='first-child'] The class name of the first item\n       *     @param {string} [options.lastItemClassName='last-child'] The class name of the last item\n       *     @param {object} [options.template] A markup string set to make element\n       *         @param {string|function} [options.template.page] HTML template\n       *         @param {string|function} [options.template.currentPage] HTML template\n       *         @param {string|function} [options.template.moveButton] HTML template\n       *         @param {string|function} [options.template.disabledMoveButton] HTML template\n       *         @param {string|function} [options.template.moreButton] HTML template\n       * @param {function} handler - Event handler\n       * @ignore\n       */\n\n      var View = snippet.defineClass(\n      /** @lends View.prototype */\n      {\n        init: function init(container, options, handler) {\n          /**\n           * Root element\n           * @type {HTMLElement}\n           * @private\n           */\n          this._containerElement = null;\n          /**\n           * First item's class name\n           * @type {string}\n           * @private\n           */\n\n          this._firstItemClassName = options.firstItemClassName;\n          /**\n           * Last item's class name\n           * @type {string}\n           * @private\n           */\n\n          this._lastItemClassName = options.lastItemClassName;\n          /**\n           * Default template\n           * @type {object.<string, string|function>}\n           * @private\n           */\n\n          this._template = extend({}, defaultTemplate, options.template);\n          /**\n           * Map of buttons\n           * @type {object.<string, HTMLElement>}\n           * @private\n           */\n\n          this._buttons = {};\n          /**\n           * Enabled page elements list\n           * @type {array}\n           * @private\n           */\n\n          this._enabledPageElements = [];\n\n          this._setRootElement(container);\n\n          this._setMoveButtons();\n\n          this._setDisabledMoveButtons();\n\n          this._setMoreButtons();\n\n          this._attachClickEvent(handler);\n        },\n\n        /* eslint-enable complexity */\n\n        /**\n         * Set root element\n         * @param {string|HTMLElement|jQueryObject} container - Container element or id selector\n         * @private\n         */\n        _setRootElement: function _setRootElement(container) {\n          if (isString(container)) {\n            container = document.getElementById(container);\n          } else if (container.jquery) {\n            container = container[0];\n          }\n\n          if (!isHTMLNode(container)) {\n            throw new Error(INVALID_CONTAINER_ELEMENT);\n          }\n\n          this._containerElement = container;\n        },\n\n        /**\n         * Assign move buttons to option\n         * @private\n         */\n        _setMoveButtons: function _setMoveButtons() {\n          var template = this._template.moveButton;\n          forEach(moveButtons, function (type) {\n            this._buttons[type] = util.changeTemplateToElement(template, {\n              type: type\n            });\n          }, this);\n        },\n\n        /**\n         * Assign disabled move buttons to option\n         * @private\n         */\n        _setDisabledMoveButtons: function _setDisabledMoveButtons() {\n          var template = this._template.disabledMoveButton;\n          var key;\n          forEach(moveButtons, function (type) {\n            key = 'disabled' + util.capitalizeFirstLetter(type);\n            this._buttons[key] = util.changeTemplateToElement(template, {\n              type: type\n            });\n          }, this);\n        },\n\n        /**\n         * Assign more buttons to option\n         * @private\n         */\n        _setMoreButtons: function _setMoreButtons() {\n          var template = this._template.moreButton;\n          var key;\n          forEach(moreButtons, function (type) {\n            key = type + 'More';\n            this._buttons[key] = util.changeTemplateToElement(template, {\n              type: type\n            });\n          }, this);\n        },\n\n        /* eslint-enable camelcase */\n\n        /**\n         * Get container element\n         * @returns {HTMLElement} Container element\n         * @private\n         */\n        _getContainerElement: function _getContainerElement() {\n          return this._containerElement;\n        },\n\n        /**\n         * Append first button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendFirstButton: function _appendFirstButton(viewData) {\n          var button;\n\n          if (viewData.page > 1) {\n            button = this._buttons.first;\n          } else {\n            button = this._buttons.disabledFirst;\n          }\n\n          this._getContainerElement().appendChild(button);\n        },\n\n        /**\n         * Append previous button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendPrevButton: function _appendPrevButton(viewData) {\n          var button;\n\n          if (viewData.currentPageIndex > 1) {\n            button = this._buttons.prev;\n          } else {\n            button = this._buttons.disabledPrev;\n          }\n\n          this._getContainerElement().appendChild(button);\n        },\n\n        /**\n         * Append next button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendNextButton: function _appendNextButton(viewData) {\n          var button;\n\n          if (viewData.currentPageIndex < viewData.lastPageListIndex) {\n            button = this._buttons.next;\n          } else {\n            button = this._buttons.disabledNext;\n          }\n\n          this._getContainerElement().appendChild(button);\n        },\n\n        /**\n         * Append last button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendLastButton: function _appendLastButton(viewData) {\n          var button;\n\n          if (viewData.page < viewData.lastPage) {\n            button = this._buttons.last;\n          } else {\n            button = this._buttons.disabledLast;\n          }\n\n          this._getContainerElement().appendChild(button);\n        },\n\n        /**\n         * Append previous more button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendPrevMoreButton: function _appendPrevMoreButton(viewData) {\n          var button;\n\n          if (viewData.prevMore) {\n            button = this._buttons.prevMore;\n            util.addClass(button, this._firstItemClassName);\n\n            this._getContainerElement().appendChild(button);\n          }\n        },\n\n        /**\n         * Append next more button on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendNextMoreButton: function _appendNextMoreButton(viewData) {\n          var button;\n\n          if (viewData.nextMore) {\n            button = this._buttons.nextMore;\n            util.addClass(button, this._lastItemClassName);\n\n            this._getContainerElement().appendChild(button);\n          }\n        },\n\n        /**\n         * Append page number elements on container element\n         * @param {object} viewData - View data to render pagination\n         * @private\n         */\n        _appendPages: function _appendPages(viewData) {\n          // eslint-disable-line complexity\n          var template = this._template;\n          var firstPage = viewData.leftPageNumber;\n          var lastPage = viewData.rightPageNumber;\n          var pageItem, i;\n\n          for (i = firstPage; i <= lastPage; i += 1) {\n            if (i === viewData.page) {\n              pageItem = util.changeTemplateToElement(template.currentPage, {\n                page: i\n              });\n            } else {\n              pageItem = util.changeTemplateToElement(template.page, {\n                page: i\n              });\n\n              this._enabledPageElements.push(pageItem);\n            }\n\n            if (i === firstPage && !viewData.prevMore) {\n              util.addClass(pageItem, this._firstItemClassName);\n            }\n\n            if (i === lastPage && !viewData.nextMore) {\n              util.addClass(pageItem, this._lastItemClassName);\n            }\n\n            this._getContainerElement().appendChild(pageItem);\n          }\n        },\n\n        /**\n         * Attach click event\n         * @param {function} callback - Callback function\n         * @private\n         */\n        _attachClickEvent: function _attachClickEvent(callback) {\n          var rootElement = this._getContainerElement();\n\n          util.addEventListener(rootElement, 'click', bind(function (event) {\n            var target = util.getTargetElement(event);\n            var page, buttonType;\n            util.preventDefault(event);\n            buttonType = this._getButtonType(target);\n\n            if (!buttonType) {\n              page = this._getPageNumber(target);\n            }\n\n            callback(buttonType, page);\n          }, this));\n        },\n\n        /**\n         * Get button type to move button elements\n         * @param {HTMLElement} targetElement - Each move button element\n         * @returns {?string} Button type\n         * @private\n         */\n        _getButtonType: function _getButtonType(targetElement) {\n          var buttonType;\n          var buttons = this._buttons;\n          forEach(buttons, function (button, type) {\n            if (util.isContained(targetElement, button)) {\n              buttonType = type;\n              return false;\n            }\n\n            return true;\n          }, this);\n          return buttonType;\n        },\n\n        /* eslint-enable no-lonely-if */\n\n        /**\n         * Get number to page elements\n         * @param {HTMLElement} targetElement - Each page element\n         * @returns {?number} Page number\n         * @private\n         */\n        _getPageNumber: function _getPageNumber(targetElement) {\n          var targetPage = this._findPageElement(targetElement);\n\n          var page;\n\n          if (targetPage) {\n            page = parseInt(targetPage.innerText, 10);\n          }\n\n          return page;\n        },\n\n        /**\n         * Find target element from page elements\n         * @param {HTMLElement} targetElement - Each page element\n         * @returns {HTMLElement} Found element\n         * @ignore\n         */\n        _findPageElement: function _findPageElement(targetElement) {\n          var i, length, pickedItem;\n\n          for (i = 0, length = this._enabledPageElements.length; i < length; i += 1) {\n            pickedItem = this._enabledPageElements[i];\n\n            if (util.isContained(targetElement, pickedItem)) {\n              return pickedItem;\n            }\n          }\n\n          return null;\n        },\n\n        /**\n         * Reset container element\n         * @private\n         */\n        _empty: function _empty() {\n          this._enabledPageElements = [];\n          forEach(this._buttons, function (buttonElement, type) {\n            this._buttons[type] = buttonElement.cloneNode(true);\n          }, this);\n          this._getContainerElement().innerHTML = '';\n        },\n\n        /**\n         * Update view\n         * @param {object} viewData - View data to render pagination\n         * @ignore\n         */\n        update: function update(viewData) {\n          this._empty();\n\n          this._appendFirstButton(viewData);\n\n          this._appendPrevButton(viewData);\n\n          this._appendPrevMoreButton(viewData);\n\n          this._appendPages(viewData);\n\n          this._appendNextMoreButton(viewData);\n\n          this._appendNextButton(viewData);\n\n          this._appendLastButton(viewData);\n        }\n      });\n      module.exports = View;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      'use strict';\n\n      var snippet = __webpack_require__(7);\n\n      var util = {\n        /**\n         * Bind event to element\n         * @param {HTMLElement} element - DOM element to attach the event handler on\n         * @param {string} eventType - Event type\n         * @param {Function} callback - Event handler function\n         */\n        addEventListener: function addEventListener(element, eventType, callback) {\n          if (element.addEventListener) {\n            element.addEventListener(eventType, callback, false);\n          } else {\n            element.attachEvent('on' + eventType, callback);\n          }\n        },\n\n        /**\n         * Prevent default event\n         * @param {Event} event - Event object\n         */\n        preventDefault: function preventDefault(event) {\n          if (event.preventDefault) {\n            event.preventDefault();\n          } else {\n            event.returnValue = false;\n          }\n        },\n\n        /**\n         * Get target from event object\n         * @param {Event} event - Event object\n         * @returns {HTMLElement} Target element\n         */\n        getTargetElement: function getTargetElement(event) {\n          return event.target || event.srcElement;\n        },\n\n        /**\n         * Add classname\n         * @param {HTMLElement} element - Target element\n         * @param {string} className - Classname\n         */\n        addClass: function addClass(element, className) {\n          if (!element) {\n            return;\n          }\n\n          if (element.className === '') {\n            element.className = className;\n          } else if (!util.hasClass(element, className)) {\n            element.className += ' ' + className;\n          }\n        },\n\n        /**\n         * Check the element has specific class or not\n         * @param {HTMLElement} element - A target element\n         * @param {string} className - A name of class to find\n         * @returns {boolean} Whether the element has the class\n         */\n        hasClass: function hasClass(element, className) {\n          var elClassName = util.getClass(element);\n          return elClassName.indexOf(className) > -1;\n        },\n\n        /**\n         * Get class name\n         * @param {HTMLElement} element - HTMLElement\n         * @returns {string} Class name\n         */\n        getClass: function getClass(element) {\n          return element && element.getAttribute && (element.getAttribute('class') || element.getAttribute('className') || '');\n        },\n\n        /**\n         * Capitalize first letter\n         * @param {string} str - String to change\n         * @returns {string} Changed string\n         */\n        capitalizeFirstLetter: function capitalizeFirstLetter(str) {\n          return str.substring(0, 1).toUpperCase() + str.substring(1, str.length);\n        },\n\n        /**\n         * Check the element is contained\n         * @param {HTMLElement} find - Target element\n         * @param {HTMLElement} parent - Wrapper element\n         * @returns {boolean} Whether contained or not\n         */\n        isContained: function isContained(find, parent) {\n          if (!parent) {\n            return false;\n          }\n\n          return find === parent ? true : parent.contains(find);\n        },\n\n        /**\n         * Replace matched property with template\n         * @param {string} template - String of template\n         * @param {object} props - Properties\n         * @returns {string} Replaced template string\n         */\n        replaceTemplate: function replaceTemplate(template, props) {\n          var newTemplate = template.replace(/\\{\\{(\\w*)\\}\\}/g, function (value, prop) {\n            return props.hasOwnProperty(prop) ? props[prop] : '';\n          });\n          return newTemplate;\n        },\n\n        /**\n         * Change template string to element\n         * @param {string|Function} template - Template option\n         * @param {object} props - Template props\n         * @returns {string} Replaced template\n         */\n        changeTemplateToElement: function changeTemplateToElement(template, props) {\n          var html;\n\n          if (snippet.isFunction(template)) {\n            html = template(props);\n          } else {\n            html = util.replaceTemplate(template, props);\n          }\n\n          return util.getElementFromTemplate(html);\n        },\n\n        /**\n         * Get element from template string\n         * @param {string} template - Template string\n         * @returns {HTMLElement} Changed element\n         */\n        getElementFromTemplate: function getElementFromTemplate(template) {\n          var tempElement = document.createElement('div');\n          tempElement.innerHTML = template;\n          return tempElement.children[0];\n        },\n\n        /**\n         * Send information to google analytics\n         */\n        sendHostNameToGA: function sendHostNameToGA() {\n          snippet.sendHostname('pagination', 'UA-129987462-1');\n        }\n      };\n      module.exports = util;\n      /***/\n    }])\n  );\n});\n\n;","map":null,"metadata":{},"sourceType":"script"}